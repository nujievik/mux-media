name: Push and pull request Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test-linux:
    name: Test and Build on Ubuntu
    runs-on: ubuntu-latest

    env:
      TARGET: x86_64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v4

      - name: Install mkvtoolnix & FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y mkvtoolnix ffmpeg
          mkvmerge -V
          ffmpeg -h

      - name: Install target
        run: rustup target add ${{ env.TARGET }}

      - name: Test
        run: cargo test --target ${{ env.TARGET }}

      - name: Build
        run: cargo build --release --target ${{ env.TARGET }}

      - name: Release Test
        run: cargo test --release --target ${{ env.TARGET }}

  test-linux-32bit:
    name: Test and Build on Ubuntu (32-bit)
    runs-on: ubuntu-latest

    env:
      TARGET: i686-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v4

      - name: Install mkvtoolnix & FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y mkvtoolnix ffmpeg
          mkvmerge -V
          ffmpeg -h

      - name: Install 32-bit dependencies
        run: |
          sudo apt-get install -y gcc-multilib

      - name: Install target
        run: rustup target add ${{ env.TARGET }}

      - name: Test
        run: cargo test --target ${{ env.TARGET }}

      - name: Build
        run: cargo build --release --target ${{ env.TARGET }}

      - name: Release Test
        run: cargo test --release --target ${{ env.TARGET }}

  test-windows:
    name: Test and Build on Windows
    runs-on: windows-latest

    env:
      TARGET: x86_64-pc-windows-msvc
    
    steps:
      - uses: actions/checkout@v4

      - name: Install ffmpeg (gyan.dev build)
        shell: pwsh
        run: |
          $url = "https://www.gyan.dev/ffmpeg/builds/ffmpeg-git-full.7z"
          $archive = "$env:RUNNER_TEMP\\ffmpeg.7z"
          $extractPath = "$env:RUNNER_TEMP\\ffmpeg"
          
          Invoke-WebRequest -Uri $url -OutFile $archive

          if (-Not (Test-Path $extractPath)) {
            New-Item -ItemType Directory -Path $extractPath | Out-Null
          }

          7z x $archive "-o$extractPath" -y

          Write-Host "Contents of ${extractPath}:"
          Get-ChildItem $extractPath | ForEach-Object { Write-Host $_.Name }

          $ffmpegDir = Get-ChildItem $extractPath |
            Where-Object {
              $_.PSIsContainer -and $_.Name -like "ffmpeg*"
            } |
            Select-Object -First 1

          if (-not $ffmpegDir) {
            Write-Error "FFmpeg folder not found in $extractPath"
            exit 1
          }

          $ffmpegBin = Join-Path $ffmpegDir.FullName "bin"

          Write-Host "Adding ffmpeg bin path: $ffmpegBin"
          echo $ffmpegBin | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Check ffmpeg
        run: ffmpeg -h

      - name: Install mkvtoolnix
        shell: powershell
        run: |
          choco install mkvtoolnix -y
          echo "C:\Program Files\MKVToolNix" | Out-File -Append -Encoding ascii $env:GITHUB_PATH

      - name: Check mkvmerge
        run: mkvmerge -V

      - name: Install target
        run: rustup target add ${{ env.TARGET }}

      - name: Test
        run: cargo test --target ${{ env.TARGET }}

      - name: Build
        run: cargo build --release --target ${{ env.TARGET }}

      - name: Release Test
        run: cargo test --release --target ${{ env.TARGET }}

      - name: Test with_embedded_bins
        run: cargo test --target ${{ env.TARGET }} --features with_embedded_bins

      - name: Build with_embedded_bins
        run: cargo build --release --target ${{ env.TARGET }} --features with_embedded_bins

      - name: Release Test with_embedded_bins
        run: cargo test --release --target ${{ env.TARGET }} --features with_embedded_bins

  test-windows-32bit:
    name: Test and Build on Windows (32-bit)
    runs-on: windows-latest

    env:
      TARGET: i686-pc-windows-msvc

    steps:
      - uses: actions/checkout@v4

      - name: Install mkvtoolnix
        shell: powershell
        run: |
          choco install mkvtoolnix -y
          echo "C:\Program Files\MKVToolNix" | Out-File -Append -Encoding ascii $env:GITHUB_PATH

      - name: Check mkvmerge
        run: mkvmerge -V

      - name: Install ffmpeg
        shell: powershell
        run: |
          choco install ffmpeg -y

      - name: Check ffmpeg
        run: ffmpeg -h

      - name: Install target
        run: rustup target add ${{ env.TARGET }}

      - name: Test
        run: cargo test --target ${{ env.TARGET }}

      - name: Build
        run: cargo build --release --target ${{ env.TARGET }}

      - name: Release Test
        run: cargo test --release --target ${{ env.TARGET }}

  test-macos:
    name: Test and Build on macOS
    runs-on: macos-latest

    env:
      TARGET: aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v4

      - name: Ensure Homebrew is installed
        run: |
          if ! command -v brew &>/dev/null; then
            echo "Homebrew not found. Installing..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> "$HOME/.zprofile"
            eval "$(/opt/homebrew/bin/brew shellenv)"
          else
            echo "Homebrew is already installed."
          fi

      - name: Install mkvtoolnix & FFmpeg
        run: |
          brew install mkvtoolnix ffmpeg
          mkvmerge -V
          ffmpeg -h

      - name: Install target
        run: rustup target add ${{ env.TARGET }}

      - name: Test
        run: cargo test --target ${{ env.TARGET }}

      - name: Build
        run: cargo build --release --target ${{ env.TARGET }}

      - name: Release Test
        run: cargo test --release --target ${{ env.TARGET }}

  test-macos-x64:
    name: Test and Build on macOS (x86_64)
    runs-on: macos-latest

    env:
      TARGET: x86_64-apple-darwin

    steps:
      - uses: actions/checkout@v4

      - name: Ensure Homebrew is installed
        run: |
          if ! command -v brew &>/dev/null; then
            echo "Homebrew not found. Installing..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> "$HOME/.zprofile"
            eval "$(/opt/homebrew/bin/brew shellenv)"
          else
            echo "Homebrew is already installed."
          fi

      - name: Install mkvtoolnix & FFmpeg
        run: |
          brew install mkvtoolnix ffmpeg
          mkvmerge -V
          ffmpeg -h

      - name: Install target
        run: rustup target add ${{ env.TARGET }}

      - name: Test
        run: cargo test --target ${{ env.TARGET }}

      - name: Build
        run: cargo build --release --target ${{ env.TARGET }}

      - name: Release Test
        run: cargo test --release --target ${{ env.TARGET }}
