use super::super::cli_args::MuxConfigArg;
use super::{Blocks, val_parsers::ChaptersParser};
use crate::{
    AudioTracks, ButtonTracks, CLIArg, DefaultTFlags, EnabledTFlags, FontAttachs, ForcedTFlags,
    Msg, OtherAttachs, Specials, SubTracks, TrackLangs, TrackNames, VideoTracks,
};
use clap::{Arg, ArgAction, builder::ValueParser};
use std::str::FromStr;

impl Blocks {
    pub fn target(mut self) -> Self {
        self.0 = self
            .0
            .next_help_heading(Msg::HelpTargetOptions.to_str_localized())
            .arg(
                Arg::new(MuxConfigArg::TargetHelp.as_long())
                    .long(MuxConfigArg::TargetHelp.as_long())
                    .help(Msg::HelpTargetHelp.to_str_localized())
                    .action(ArgAction::SetTrue),
            )
            .arg(
                Arg::new(MuxConfigArg::ListTargets.as_long())
                    .long(MuxConfigArg::ListTargets.as_long())
                    .help(Msg::HelpListTargets.to_str_localized())
                    .action(ArgAction::SetTrue),
            )
            .arg(
                Arg::new(MuxConfigArg::Audio.as_long())
                    .short('a')
                    .long(MuxConfigArg::Audio.as_long())
                    .aliases(&["audio-tracks", "atracks"])
                    .value_name("[!]n[,m]...")
                    .help(Msg::HelpAudio.to_str_localized())
                    .value_parser(ValueParser::new(AudioTracks::from_str)),
            )
            .arg(
                Arg::new(MuxConfigArg::NoAudio.as_long())
                    .short('A')
                    .long(MuxConfigArg::NoAudio.as_long())
                    .alias("noaudio")
                    .help(Msg::HelpNoAudio.to_str_localized())
                    .action(ArgAction::SetTrue)
                    .conflicts_with(MuxConfigArg::Audio.as_long()),
            )
            .arg(
                Arg::new(MuxConfigArg::Subs.as_long())
                    .short('s')
                    .long(MuxConfigArg::Subs.as_long())
                    .aliases(&["subtitle-tracks", "subtitles", "sub-tracks", "stracks"])
                    .value_name("[!]n[,m]...")
                    .help(Msg::HelpSubs.to_str_localized())
                    .value_parser(ValueParser::new(SubTracks::from_str)),
            )
            .arg(
                Arg::new(MuxConfigArg::NoSubs.as_long())
                    .short('S')
                    .long(MuxConfigArg::NoSubs.as_long())
                    .aliases(&["no-subtitles", "nosubtitles", "nosubs"])
                    .help(Msg::HelpNoSubs.to_str_localized())
                    .action(ArgAction::SetTrue)
                    .conflicts_with(MuxConfigArg::Subs.as_long()),
            )
            .arg(
                Arg::new(MuxConfigArg::Video.as_long())
                    .short('d')
                    .long(MuxConfigArg::Video.as_long())
                    .aliases(&["video-tracks", "vtracks"])
                    .value_name("[!]n[,m]...")
                    .help(Msg::HelpVideo.to_str_localized())
                    .value_parser(ValueParser::new(VideoTracks::from_str)),
            )
            .arg(
                Arg::new(MuxConfigArg::NoVideo.as_long())
                    .short('D')
                    .long(MuxConfigArg::NoVideo.as_long())
                    .alias("novideo")
                    .help(Msg::HelpNoVideo.to_str_localized())
                    .action(ArgAction::SetTrue)
                    .conflicts_with(MuxConfigArg::Video.as_long()),
            )
            .arg(
                Arg::new(MuxConfigArg::Buttons.as_long())
                    .short('b')
                    .long(MuxConfigArg::Buttons.as_long())
                    .aliases(&["button-tracks", "btracks"])
                    .value_name("[!]n[,m]...")
                    .help(Msg::HelpButtons.to_str_localized())
                    .value_parser(ValueParser::new(ButtonTracks::from_str)),
            )
            .arg(
                Arg::new(MuxConfigArg::NoButtons.as_long())
                    .short('B')
                    .long(MuxConfigArg::NoButtons.as_long())
                    .alias("nobuttons")
                    .help(Msg::HelpNoButtons.to_str_localized())
                    .action(ArgAction::SetTrue)
                    .conflicts_with(MuxConfigArg::Buttons.as_long()),
            )
            .arg(
                Arg::new(MuxConfigArg::Chapters.as_long())
                    .short('c')
                    .long(MuxConfigArg::Chapters.as_long())
                    .value_name("chp")
                    .help(Msg::HelpChapters.to_str_localized())
                    .value_parser(ValueParser::new(ChaptersParser)),
            )
            .arg(
                Arg::new(MuxConfigArg::NoChapters.as_long())
                    .short('C')
                    .long(MuxConfigArg::NoChapters.as_long())
                    .help(Msg::HelpNoChapters.to_str_localized())
                    .action(ArgAction::SetTrue)
                    .conflicts_with(MuxConfigArg::Chapters.as_long()),
            )
            .arg(
                Arg::new(MuxConfigArg::Fonts.as_long())
                    .short('f')
                    .long(MuxConfigArg::Fonts.as_long())
                    .value_name("[!]n[,m]...")
                    .help(Msg::HelpFonts.to_str_localized())
                    .value_parser(ValueParser::new(FontAttachs::from_str)),
            )
            .arg(
                Arg::new(MuxConfigArg::NoFonts.as_long())
                    .short('F')
                    .long(MuxConfigArg::NoFonts.as_long())
                    .alias("nofonts")
                    .help(Msg::HelpNoFonts.to_str_localized())
                    .action(ArgAction::SetTrue)
                    .conflicts_with(MuxConfigArg::Fonts.as_long()),
            )
            .arg(
                Arg::new(MuxConfigArg::Attachs.as_long())
                    .short('m')
                    .long(MuxConfigArg::Attachs.as_long())
                    .alias("attachments")
                    .value_name("[!]n[,m]...")
                    .help(Msg::HelpAttachs.to_str_localized())
                    .value_parser(ValueParser::new(OtherAttachs::from_str)),
            )
            .arg(
                Arg::new(MuxConfigArg::NoAttachs.as_long())
                    .short('M')
                    .long(MuxConfigArg::NoAttachs.as_long())
                    .aliases(&["no-attachments", "noattachments", "noattachs"])
                    .help(Msg::HelpNoAttachs.to_str_localized())
                    .action(ArgAction::SetTrue)
                    .conflicts_with(MuxConfigArg::Attachs.as_long()),
            )
            .arg(
                Arg::new(MuxConfigArg::Defaults.as_long())
                    .long(MuxConfigArg::Defaults.as_long())
                    .aliases(&["default-track-flags", "default-tracks"])
                    .value_name("[n:]B[,m:B]...")
                    .help(Msg::HelpDefaults.to_str_localized())
                    .value_parser(ValueParser::new(DefaultTFlags::from_str)),
            )
            .arg(
                Arg::new(MuxConfigArg::LimDefaults.as_long())
                    .long(MuxConfigArg::LimDefaults.as_long())
                    .value_name("n")
                    .help(Msg::HelpLimDefaults.to_str_localized())
                    .value_parser(clap::value_parser!(u64)),
            )
            .arg(
                Arg::new(MuxConfigArg::Forceds.as_long())
                    .long(MuxConfigArg::Forceds.as_long())
                    .aliases(&["forced-display-flags", "forced-tracks"])
                    .value_name("[n:]B[,m:B]...")
                    .help(Msg::HelpForceds.to_str_localized())
                    .value_parser(ValueParser::new(ForcedTFlags::from_str)),
            )
            .arg(
                Arg::new(MuxConfigArg::LimForceds.as_long())
                    .long(MuxConfigArg::LimForceds.as_long())
                    .value_name("n")
                    .help(Msg::HelpLimForceds.to_str_localized())
                    .value_parser(clap::value_parser!(u64)),
            )
            .arg(
                Arg::new(MuxConfigArg::Enableds.as_long())
                    .long(MuxConfigArg::Enableds.as_long())
                    .alias("track-enabled-flags")
                    .value_name("[n:]B[,m:B]...")
                    .help(Msg::HelpEnableds.to_str_localized())
                    .value_parser(ValueParser::new(EnabledTFlags::from_str)),
            )
            .arg(
                Arg::new(MuxConfigArg::LimEnableds.as_long())
                    .long(MuxConfigArg::LimEnableds.as_long())
                    .value_name("n")
                    .help(Msg::HelpLimEnableds.to_str_localized())
                    .value_parser(clap::value_parser!(u64)),
            )
            .arg(
                Arg::new(MuxConfigArg::Names.as_long())
                    .long(MuxConfigArg::Names.as_long())
                    .alias("track-names")
                    .value_name("[n:]N[,m:N]...")
                    .help(Msg::HelpNames.to_str_localized())
                    .value_parser(ValueParser::new(TrackNames::from_str)),
            )
            .arg(
                Arg::new(MuxConfigArg::Langs.as_long())
                    .long(MuxConfigArg::Langs.as_long())
                    .alias("languages")
                    .value_name("[n:]L[,m:L]...")
                    .help(Msg::HelpLangs.to_str_localized())
                    .value_parser(ValueParser::new(TrackLangs::from_str)),
            )
            .arg(
                Arg::new(MuxConfigArg::Specials.as_long())
                    .long(MuxConfigArg::Specials.as_long())
                    .value_name("\"n[ m]...\"")
                    .allow_hyphen_values(true)
                    .help(Msg::HelpSpecials.to_str_localized())
                    .value_parser(ValueParser::new(Specials::from_str)),
            );

        self
    }
}
