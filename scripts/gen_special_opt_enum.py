import re
from pathlib import Path

PROJECT_DIR = Path(__file__).resolve().parent.parent
INPUT_FILE = PROJECT_DIR / "resources" / "mkvmerge.cpp"
OUTPUT_FILE = PROJECT_DIR / "src" / "types" / "specials" / "special_opt.rs"

READ_LINES = 500
ARG_RE = re.compile(r'--?[a-zA-Z][\w\-]*')

INDENT = "    "

def to_pascal_case(arg: str) -> str:
    arg = arg.lstrip('-')
    parts = arg.split('-')
    return ''.join(part.capitalize() for part in parts)


def extract_args_from_file(path: Path) -> list[str]:
    with path.open("r", encoding="utf-8") as f:
        content = ''.join(next(f) for _ in range(READ_LINES))

    matches = set(ARG_RE.findall(content))

    serialized = set()
    enum_args = {}
    for arg in matches:
        arg = to_pascal_case(arg)
        if arg in enum_args and len(arg) == 1:
            if arg not in serialized:
                s = f'#[strum(serialize = "{arg.upper()}")]\n'
                s += INDENT
                s += f'#[strum(serialize = "{arg.lower()}")]\n'
                s += INDENT
                s += arg
                enum_args[arg] = s
                serialized.add(arg)
        else:
            enum_args[arg] = arg

    return [enum_args[arg] for arg in sorted(enum_args)]


def generate_rust_enum(args: list[str]) -> str:
    variants = [f"{INDENT}{arg}," for arg in args]
    return (
        f"// Auto-generated by {Path(__file__).name}\n\n"

        "use strum_macros::EnumString;\n\n"

        "#[derive(Clone, Copy, EnumString)]\n"
        '#[strum(serialize_all = "kebab-case")]\n'
        "pub enum SpecialOpt {\n"
        + "\n".join(variants) +
        "\n}\n"
    )


def main():
    args = extract_args_from_file(Path(INPUT_FILE))
    rust_enum = generate_rust_enum(args)

    with Path(OUTPUT_FILE).open("w", encoding="utf-8") as f:
        f.write(rust_enum)

    print(f"âœ… Success generated with {len(args)} variants -> {OUTPUT_FILE}")


if __name__ == "__main__":
    main()

